function y = adMo(f,y0,dt,tend)

% adMo(f,y0,dt,tend). Calculates the solution of the differential
% equation y' = f(y) with y(0) = y0 using the second order 
% Adams-Moulton method. f is a handle to the function f(y); 
% y0 is the initial value of the function; dt is the timestep; 
% tend is the final time. Two different methods are implemented, both
% giving practically the same solution.

tic
Tn = tend./dt;
t = 0:dt:tend;
y(1) = y0;
method = ;

% First alternative for Worksheet 1: Solve the quadratic equation
if(method==1)
    a = 1;
    b = (1-7*dt/2)*20/(7*dt);
    c = @(yn)(-1-7*dt/2*(1-yn/10))*20*yn/(7*dt);

    for j=2:Tn+1
    %     y(j) = 2*c(y(j-1))/(-sqrt(b^2-4*a*c(y(j-1)))-b);
        y(j) = -b/(2*a) + sqrt(b^2-4*a*c(y(j-1)))/(2*a);
    end
end
t = toc;

% Second alternative: Use Newton's method
if(method == 2)
    syms ys;
    fs = f(ys);         %Make the function handle a symbolic function
    dfs = diff(fs,ys);   %Find its derivative

    for j=2:Tn+1
        tol = 1e-4;
        ERR = Inf;
        y(j) = y(j-1); %Initial guess for the y(j) value
        F = ys - y(j-1) - (dt/2)*(fs+subs(fs,y(j-1))); %Adams-Moulton function for Newton's method
        dF = 1 -(dt/2)*dfs;                            %Its derivative
        while(ERR>tol)
            yprev = y(j);
            y(j) = yprev-subs(F,yprev)/subs(dF,yprev); %Newton's method
            if(abs(abs(y(j)-yprev)/ERR)>1) error('The error is growing. Cannot solve the equation.'); end
            ERR = abs(y(j)-yprev);
        end
    end
end
tE=toc;